// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/zura-t/go_delivery_system-shops/pkg/db/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	db "github.com/zura-t/go_delivery_system-shops/pkg/db/sqlc"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateMenuItem mocks base method.
func (m *MockStore) CreateMenuItem(arg0 context.Context, arg1 db.CreateMenuItemParams) (db.MenuItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMenuItem", arg0, arg1)
	ret0, _ := ret[0].(db.MenuItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMenuItem indicates an expected call of CreateMenuItem.
func (mr *MockStoreMockRecorder) CreateMenuItem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMenuItem", reflect.TypeOf((*MockStore)(nil).CreateMenuItem), arg0, arg1)
}

// CreateShop mocks base method.
func (m *MockStore) CreateShop(arg0 context.Context, arg1 db.CreateShopParams) (db.Shop, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateShop", arg0, arg1)
	ret0, _ := ret[0].(db.Shop)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateShop indicates an expected call of CreateShop.
func (mr *MockStoreMockRecorder) CreateShop(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateShop", reflect.TypeOf((*MockStore)(nil).CreateShop), arg0, arg1)
}

// DeleteMenuItem mocks base method.
func (m *MockStore) DeleteMenuItem(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMenuItem", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMenuItem indicates an expected call of DeleteMenuItem.
func (mr *MockStoreMockRecorder) DeleteMenuItem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMenuItem", reflect.TypeOf((*MockStore)(nil).DeleteMenuItem), arg0, arg1)
}

// DeleteShop mocks base method.
func (m *MockStore) DeleteShop(arg0 context.Context, arg1 db.DeleteShopParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteShop", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteShop indicates an expected call of DeleteShop.
func (mr *MockStoreMockRecorder) DeleteShop(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteShop", reflect.TypeOf((*MockStore)(nil).DeleteShop), arg0, arg1)
}

// GetMenuItem mocks base method.
func (m *MockStore) GetMenuItem(arg0 context.Context, arg1 int64) (db.MenuItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMenuItem", arg0, arg1)
	ret0, _ := ret[0].(db.MenuItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMenuItem indicates an expected call of GetMenuItem.
func (mr *MockStoreMockRecorder) GetMenuItem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMenuItem", reflect.TypeOf((*MockStore)(nil).GetMenuItem), arg0, arg1)
}

// GetShop mocks base method.
func (m *MockStore) GetShop(arg0 context.Context, arg1 int64) (db.Shop, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShop", arg0, arg1)
	ret0, _ := ret[0].(db.Shop)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShop indicates an expected call of GetShop.
func (mr *MockStoreMockRecorder) GetShop(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShop", reflect.TypeOf((*MockStore)(nil).GetShop), arg0, arg1)
}

// GetShopsAdmin mocks base method.
func (m *MockStore) GetShopsAdmin(arg0 context.Context, arg1 db.GetShopsAdminParams) ([]db.Shop, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShopsAdmin", arg0, arg1)
	ret0, _ := ret[0].([]db.Shop)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShopsAdmin indicates an expected call of GetShopsAdmin.
func (mr *MockStoreMockRecorder) GetShopsAdmin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShopsAdmin", reflect.TypeOf((*MockStore)(nil).GetShopsAdmin), arg0, arg1)
}

// ListMenuItems mocks base method.
func (m *MockStore) ListMenuItems(arg0 context.Context, arg1 db.ListMenuItemsParams) ([]db.MenuItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMenuItems", arg0, arg1)
	ret0, _ := ret[0].([]db.MenuItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMenuItems indicates an expected call of ListMenuItems.
func (mr *MockStoreMockRecorder) ListMenuItems(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMenuItems", reflect.TypeOf((*MockStore)(nil).ListMenuItems), arg0, arg1)
}

// ListShops mocks base method.
func (m *MockStore) ListShops(arg0 context.Context, arg1 db.ListShopsParams) ([]db.Shop, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListShops", arg0, arg1)
	ret0, _ := ret[0].([]db.Shop)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListShops indicates an expected call of ListShops.
func (mr *MockStoreMockRecorder) ListShops(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListShops", reflect.TypeOf((*MockStore)(nil).ListShops), arg0, arg1)
}

// UpdateMenuItem mocks base method.
func (m *MockStore) UpdateMenuItem(arg0 context.Context, arg1 db.UpdateMenuItemParams) (db.MenuItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMenuItem", arg0, arg1)
	ret0, _ := ret[0].(db.MenuItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMenuItem indicates an expected call of UpdateMenuItem.
func (mr *MockStoreMockRecorder) UpdateMenuItem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMenuItem", reflect.TypeOf((*MockStore)(nil).UpdateMenuItem), arg0, arg1)
}

// UpdateShop mocks base method.
func (m *MockStore) UpdateShop(arg0 context.Context, arg1 db.UpdateShopParams) (db.Shop, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateShop", arg0, arg1)
	ret0, _ := ret[0].(db.Shop)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateShop indicates an expected call of UpdateShop.
func (mr *MockStoreMockRecorder) UpdateShop(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateShop", reflect.TypeOf((*MockStore)(nil).UpdateShop), arg0, arg1)
}
